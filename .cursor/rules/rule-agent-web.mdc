---
description: 
globs: 
alwaysApply: true
---
life-agent-web是我的整个项目包

2025-06-12：agent-web是我目前在做的具体项目，主要是做一个三栏的页面，中间栏里的'报告编制'里的only-office控件是我目前重点工作，目前主要是要走通only-office控件在打开docx后自动运行一个plugin，并注入'hello world'字符串到docx中（先走通最简单的，后续我要让这个插件响应后台agent指令，并将agent生成结果实时注入到docx中）。
2025-06-13：今天考虑放弃only-office，改用collabora的CODE实现后台信息实时注入前端office控件的功能。

agent-web项目注意事项：
1）agent-web页面部署在powerai.cc:5101
2）我部署的collabora CODE(docker方式部署在powerai.cc:5102，docker容器是collabora-code-5102)。
3）remote-dev.sh用于同步文件到powerai.cc，并重启agent-web页面、collabora-code-5102等
4）collabora-code-5102和后台进行web socket之类的通信的端口用5112
（注意：
    a）CODE容器启动时，domain参数不要做限制，另外浏览器必须https://powerai.cc:5102这样才能看到返回的'ok'；
    b）另外CODE的5102访问5101的empty.docx有跨域CORS问题，要配置好，最好CODE采用WOPI协议访问docx
    c）测试结果表明，CODE和wopi都必须用https才行，目前用了powerai.cc的/home/tutu/ssl/下的证书，且要特别注意CODE和wopi使用ssl时证书文件的权限问题，一定要解决清楚。
    d）测试结果表明，agent-web（5101）也要运行在https上，否则CODE、wopi和agent-web就会产生Content Security Policy (CSP) 问题。都用https后，现在已经跑通。
    e）记得要让CODE控件界面设置为简体中文。
    f）向docx成功注入信息的关键见agent-web/src/components/code_api关键.txt。
    g）后台的web socket之类的全局dict管理，一定要注意python的不同模块导入导致的全局变量不唯一的问题，解决办法是将入Office_Tool这种多次导入的文件中的web socket管理类放到单独的如utils/web_socket_manager.py这类独立文件中仅暴露get_socket_manager()提供全局量引用
    h）前端调用后端agent可能存在超时机制不匹配问题，后台目前agent超时设置了3600秒。另外要谨防cursor自说自话在agent完成部分任务时自己就结束前端任务了,claude处理前端超时机制也比较弱，像查询status这种2个前端都会相互死锁，一开始去掉超时机制就行。
）
5）powerai.cc上如果要调用python要这样：
source /home/tutu/anaconda3/etc/profile.d/conda.sh
conda activate client