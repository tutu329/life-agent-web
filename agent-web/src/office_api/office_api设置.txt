（仍然搞不定，可能考虑非docker方式部署）

1、清理容器
    服务器运行：sudo docker stop collabora-code-5102
    服务器运行：sudo docker rm collabora-code-5102
    cursor运行：remote-dev.sh

2、先要确保前端CODE控件中‘宏选择器’能看到/opt/collaboraoffice/share/Scripts/python下的office_api.py，必须安装官方要求的collaboraofficebasis-python-script-provider和collaboraofficebasis-pyuno
#---------------------（为官方方案，之前安装不行应该是gpg没有添加的问题）----------------------------
# 1. root方式进入正在运行的 Collabora 容器
sudo docker exec -it --user root collabora-code-5102 /bin/bash

# 2. 安装wget
apt update
apt install wget

# 3. 添加 Collabora 仓库并更新
mkdir -p /etc/apt/keyrings && cd /etc/apt/keyrings
wget -O collaboraonline-release-keyring.gpg https://collaboraoffice.com/downloads/gpg/collaboraonline-release-keyring.gpg

# 4. 创建源文件
echo "Types: deb
URIs: https://www.collaboraoffice.com/repos/CollaboraOnline/CODE-deb
Suites: ./
Signed-By: /etc/apt/keyrings/collaboraonline-release-keyring.gpg" > /etc/apt/sources.list.d/collaboraonline.sources

# 5. 更新并安装所需包
apt update
apt install -y collaboraofficebasis-python-script-provider collaboraofficebasis-pyuno
#---------------------（为官方方案，之前安装不行应该是gpg没有添加的问题）----------------------------

3、运行remote-dev.sh，确保容器中的office_api.py的权限没问题(cool:cool 755)，然后‘宏选择器’就能看到office_api.hello

4、让‘宏选择器’能够执行office_api.hello（修改coolwsd.xml配置(打开宏的执行、宏安全等级设置为0)，要注意：执行一个sed后，可能自动退出容器，需要再登录从而执行第二个sed！！！）
    sudo docker exec -it --user root collabora-code-5102 /bin/bash
    sed -i 's/<enable_macros_execution[^>]*>false<\/enable_macros_execution>/<enable_macros_execution desc="Specifies whether the macro execution is enabled in general. This will enable Basic and Python scripts to execute both installed and from documents. If it is set to false, the macro_security_level is ignored. If it is set to true, the mentioned entry specified the level of macro security." type="bool" default="false">true<\/enable_macros_execution>/' /etc/coolwsd/coolwsd.xml
    sed -i 's/<macro_security_level[^>]*>1<\/macro_security_level>/<macro_security_level desc="Level of Macro security. 1 (Medium) Confirmation required before executing macros from untrusted sources. 0 (Low, not recommended) All macros will be executed without confirmation." type="int" default="1">0<\/macro_security_level>/' /etc/coolwsd/coolwsd.xml

5、重连后，然后‘宏选择器’就能够执行office_api.hello，并insertString "[2025-06-27 03:19:39] Hello from Python API! office_api.hello() 执行成功！" 到docx里了！

6、关于CallPythonScript没反应的问题：
    iframeRef.current.contentWindow?.postMessage(JSON.stringify({'MessageId': 'Host_PostmessageReady'}), '*')
    增加上述代码，就能正确执行下述代码！！！:
        const officialFormat = {
        'MessageId': 'CallPythonScript',
        'SendTime': Date.now(),
        'ScriptFile': 'office_api.py',
        'Function': 'hello',
        'Values': null
        }
        try {
        iframeRef.current.contentWindow?.postMessage(JSON.stringify({'MessageId': 'Host_PostmessageReady'}), '*')
        iframeRef.current.contentWindow?.postMessage(JSON.stringify(officialFormat), collaboraUrl)
        }




【关键】查看CODE容器实时情况的方式：sudo docker logs -f collabora-code-5102
1）由于沙箱的缘故，office_api.log不会出现在/tmp下，而是在如/opt/cool/child-roots/1-e164ef2a/RW1gAvkifPtUCE34/tmp/下
2）目前测试下来，调用CallPythonScript后台完全没有反应，而下述.uno:RunMacro有反应，页面会弹出“宏选择器”，只是不会自动执行（手动选择office_api的hello后能正确执行！因此后续尝试解决，从而不弹出‘宏选择器’而直接执行hello）
    // 方式B: 使用UNO RunMacro命令
    const unoMacroMessage = {
      MessageId: 'Send_UNO_Command',
      SendTime: Date.now(),
      Values: {
        Command: '.uno:RunMacro',
        Args: {
          Script: {
            type: 'string',
            value: 'vnd.sun.star.script:office_api.hello?language=Python&location=share'
          }
        }
      }
    }






主要是关于collabora-CODE的docker容器和容器中coolwsd的设置，最终解决postMessage的CallPythonScript调用问题



一、修改collabora-code的docker容器
1、进入容器：
    sudo docker exec -it --user root collabora-code-5102 /bin/bash
2、安装python等基础包和uno库
    apt update
    apt install python3 python3-pip python3-venv procps curl wget vim python3-requests python3-websocket python3-json5
    apt install libreoffice-script-provider-python (这个测试过，有问题的！！！不要安装)
        (注：1、之后python3中可以import uno；2、XSCRIPTCONTEXT变量为CODE控件自动注入的全局变量)
3、放入测试py
    cd /opt/collaboraoffice/share/Scripts/python
    vi api_test.py:
#------------------------------------------------------------------------------------------------------------
# api_test.py
import uno

def say_hello():
    """Writes 'Hello from Python!' into the current document."""
    try:
        # 获取文档上下文
        desktop = XSCRIPTCONTEXT.getDesktop()
        model = desktop.getCurrentComponent()

        if not model:
            return # 如果没有打开的文档，则不执行任何操作

        # 获取文档的文本内容和光标
        text = model.getText()
        cursor = text.createTextCursor()
        
        # 在文档末尾插入文本
        text.insertString(cursor, "Hello from Python! The script was executed successfully.", 0)
    except Exception as e:
        # 简单的错误处理，实际应用中可以更复杂
        # 例如，可以在文档中插入错误信息
        pass
    return None
#------------------------------------------------------------------------------------------------------------
    chown cool:cool *.py
    chmod 755 *.py
4、修改coolwsd.xml配置(打开宏的执行、宏安全等级设置为0)
sed -i 's/<enable_macros_execution[^>]*>false<\/enable_macros_execution>/<enable_macros_execution desc="Specifies whether the macro execution is enabled in general. This will enable Basic and Python scripts to execute both installed and from documents. If it is set to false, the macro_security_level is ignored. If it is set to true, the mentioned entry specified the level of macro security." type="bool" default="false">true<\/enable_macros_execution>/' /etc/coolwsd/coolwsd.xml

sed -i 's/<macro_security_level[^>]*>1<\/macro_security_level>/<macro_security_level desc="Level of Macro security. 1 (Medium) Confirmation required before executing macros from untrusted sources. 0 (Low, not recommended) All macros will be executed without confirmation." type="int" default="1">0<\/macro_security_level>/' /etc/coolwsd/coolwsd.xml

#--------------------------------------------这块似乎没用------------------------------------------------------------
5、设置coolwsd（普通用户方式登录容器(sudo docker exec -it collabora-code-5102 /bin/bash)，运行coolwsd --version会发现coolwsd压根没有正常运行）
    1）解决jails文件夹报错问题，root方式登录容器，然后：
        mkdir -p /usr/bin/jails
        chown cool:cool /usr/bin/jails
        chmod 755 /usr/bin/jails
    2）解决/etc/coolwsd/ca-chain.cert.pem问题：
        a）cat powerai_public.crt powerai_chain.crt > /etc/coolwsd/ca-chain.cert.pem
            chown cool:cool /etc/coolwsd/ca-chain.cert.pem
            chmod 600 /etc/coolwsd/ca-chain.cert.pem
        b）cp powerai.key /etc/coolwsd/key.pem
            chown cool:cool /etc/coolwsd/key.pem
            chmod 600 /etc/coolwsd/key.pem
        c）cp powerai_public.crt /etc/coolwsd/cert.pem
            chown cool:cool /etc/coolwsd/cert.pem
            chmod 600 /etc/coolwsd/cert.pem
    3）解决cool-mount文件夹权限
        root登录，chown cool:cool /usr/bin/coolmount

root登录，ln -s /opt/cool/systemplate/ /usr/bin/systemplate
root登录，ln ln -s /usr/share/coolwsd/discovery.xml /usr/bin/discovery.xml

6、刷新system-template
    coolconfig update-system-template
#--------------------------------------------这块似乎没用------------------------------------------------------------


二、重启collabora-code的docker容器